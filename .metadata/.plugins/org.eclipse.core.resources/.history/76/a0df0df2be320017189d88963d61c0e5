package com.rsmith.service;

import java.util.ArrayList;
import java.util.List;

import com.rsmith.exceptions.InvalidMoveException;
import com.rsmith.models.BoardSpace;
import com.rsmith.models.GameBoard;
import com.rsmith.models.GamePiece;
import com.rsmith.models.Location;
import com.rsmith.models.Pawn;
import com.rsmith.models.PlayerColor;

public class RuleService {
    private GameBoard board;
    
    public RuleService(GameBoard board){
	this.board = board;
    }
    
    public boolean validMove(Location from, Location to) throws InvalidMoveException{
	boolean valid = false;
	
	BoardSpace fromSpace = board.getSpaceAtLocation(from);
	BoardSpace toSpace = board.getSpaceAtLocation(to);
	
	GamePiece fromPiece = null;
	if(fromSpace != null){
	    fromPiece = fromSpace.getGamePiece();
	}
	
	GamePiece toPiece = null;
	if(toSpace != null){
	    toPiece = toSpace.getGamePiece();
	}
	
	if(fromPiece == null){
	    throw new InvalidMoveException("No game piece at the source location");
	}
	
	if(toPiece != null){
	    if(toPiece.getColor() == fromPiece.getColor()){
		throw new InvalidMoveException("Cannot capture same color game peice");
	    }
	}
	
	return valid;
    }
    
    public boolean checkPath(Location start, Location end){
    	boolean blocked = false;
    	int[] startCoords = {start.getX(), start.getY()};
    	int[] endCoords = {end.getX(), end.getY()};
    	
    	if(startCoords[0] < endCoords[0] && startCoords[1] == endCoords[1]){
    		blocked = checkMoveRight(startCoords, endCoords);
    	}
    	else if(startCoords[0] > endCoords[0] && startCoords[1] == endCoords[1]){
    		blocked = checkMoveLeft(startCoords, endCoords);
    	}
    	else if(startCoords[0] == endCoords[0] && startCoords[1]>endCoords[1]){
    		blocked = checkMoveUp(startCoords, endCoords);
    	}
    	else if(startCoords[0] == endCoords[0] && startCoords[1]<endCoords[1]){
    		blocked = checkMoveDown(startCoords, endCoords);
    	}
    	else if(startCoords[0]<endCoords[0] && startCoords[1]>endCoords[1]){
    		blocked = checkMoveUpRight(startCoords, endCoords);
    	}
    	else if(startCoords[0]>endCoords[0] && startCoords[1]>endCoords[1]){
    		blocked = checkMoveUpLeft(startCoords, endCoords);
    	}
    	else if(startCoords[0]<endCoords[0] && startCoords[1]<endCoords[1]){
    		blocked = checkMoveDownRight(startCoords, endCoords);
    	}
    	else if(startCoords[0]>endCoords[0] && startCoords[1]<endCoords[1]){
    		blocked = checkMoveDownLeft(startCoords, endCoords);
    	}
    	
    	return blocked;
    }
    
    public boolean checkMoveRight(int[] start, int[] end){
    	boolean blocked = false;
    	while(start[0]+1 < end[0]){
    		Location space = new Location(start[0]+1, start[1]);
    		if(board.getSpaceAtLocation(space).getGamePiece() != null){
    			blocked = true;
    		}
    		start[0]++;
    	}
    	return blocked;
    }
    
    public boolean checkMoveLeft(int[] start, int[] end){
    	boolean blocked = false;
    	while(start[0]-1 > end[0]){
    		Location space = new Location(start[0]+1, start[1]);
    		if(board.getSpaceAtLocation(space).getGamePiece() != null){
    			blocked = true;
    		}
    		start[0]--;
    	}
    	return blocked;
    }
    
    public boolean checkMoveUp(int[] start, int[] end){
    	boolean blocked = false;
    	while(start[1]-1 > end[1]){
    		Location space = new Location(start[0], start[1]-1);
    		if(board.getSpaceAtLocation(space).getGamePiece() != null){
    			blocked = true;
    		}
    		start[1]--;
    	}
    	return blocked;
    }
    
    public boolean checkMoveDown(int[] start, int[] end){
    	boolean blocked = false;
    	while(start[1]+1 > end[1]){
    		Location space = new Location(start[0], start[1]+1);
    		if(board.getSpaceAtLocation(space).getGamePiece() != null){
    			blocked = true;
    		}
    		start[1]++;
    	}
    	return blocked;
    }
    
    public boolean checkMoveUpRight(int[] start, int[] end){
    	boolean blocked = false;
    	while(start[1]-1 > end[1]){
    		Location space = new Location(start[0]+1, start[1]-1);
    		if(board.getSpaceAtLocation(space).getGamePiece() != null){
    			blocked = true;
    		}
    		start[0]++;
    		start[1]--;
    	}
    	return blocked;
    }
    
    public boolean checkMoveUpLeft(int[] start, int[] end){
    	boolean blocked = false;
    	while(start[1]-1 > end[1]){
    		Location space = new Location(start[0]-1, start[1]-1);
    		if(board.getSpaceAtLocation(space).getGamePiece() != null){
    			blocked = true;
    		}
    		start[0]--;
    		start[1]--;
    	}
    	return blocked;
    }
    
    public boolean checkMoveDownRight(int[] start, int[] end){
    	boolean blocked = false;
    	while(start[1]+1 < end[1]){
    		Location space = new Location(start[0]+1, start[1]+1);
    		if(board.getSpaceAtLocation(space).getGamePiece() != null){
    			blocked = true;
    		}
    		start[0]++;
    		start[1]++;
    	}
    	return blocked;
    }
    
    public boolean checkMoveDownLeft(int[] start, int[] end){
    	boolean blocked = false;
    	while(start[1]+1 < end[1]){
    		Location space = new Location(start[0]-1, start[1]+1);
    		if(board.getSpaceAtLocation(space).getGamePiece() != null){
    			blocked = true;
    		}
    		start[0]--;
    		start[1]++;
    	}
    	return blocked;
    }
    
    public List<Location> getPawnMoves(Pawn piece, Location start){
    	ArrayList<Location> validLocations = new ArrayList<Location>();
    	int x = start.toArray()[0];
    	int y = start.toArray()[1];
    	if(piece.getColor() == PlayerColor.WHITE){
    		if(piece.getIsFirstMove()){
    			validLocations.add(new Location(x,y));
    		}
    	}
    	else{
    		
    	}
    	
    	return validLocations;
    }
    
    public List<Location> getRookMoves(GamePiece piece, Location start){
    	ArrayList<Location> validLocations = new ArrayList<Location>();
    	int x = start.toArray()[0];
    	int y = start.toArray()[1];
    	return validLocations;
    }
    
    public List<Location> getKnightMoves(GamePiece piece, Location start){
    	ArrayList<Location> validLocations = new ArrayList<Location>();
    	int x = start.toArray()[0];
    	int y = start.toArray()[1];
		if(x+2 <= 7 && y <= 7){
			validLocations.add(new Location(x+2,y+1));
		}
		if(x+2 <='H' && y-1 >= 1){
			validLocations.add(new Location(x+2, y-1));
		}
		if(x-2 >='A' && y+1 <= 8){
			validLocations.add(new Location(x-2, y+1));
		}
		if(x-2 >='A' && y-1 >= 1){
			validLocations.add(new Location(x-2, y-1));
		}
		if(x+1 <='H' && y+2 <= 8){
			validLocations.add(String.valueOf((char)(x+1))+String.valueOf(y+2));
		}
		if(x+1 <='H' && y-2 >= 1){
			validLocations.add(String.valueOf((char)(x+1))+String.valueOf(y-2));
		}
		if(x-1 >='A' && y+2 <= 8){
			validLocations.add(String.valueOf((char)(x-1))+String.valueOf(y+2));
		}
		if(x-1 >='A' && y-2 >= 1){
			validLocations.add(String.valueOf((char)(x-1))+String.valueOf(y-2));
		}
    	return validLocations;
    }
    
    public List<Location> getBishopMoves(GamePiece piece, Location start){
    	ArrayList<Location> validLocations = new ArrayList<Location>();
    	int x = start.toArray()[0];
    	int y = start.toArray()[1];
    	return validLocations;
    }
    
    public List<Location> getKingMoves(GamePiece piece, Location start){
    	ArrayList<Location> validLocations = new ArrayList<Location>();
    	int x = start.toArray()[0];
    	int y = start.toArray()[1];
    	return validLocations;
    }
    
    public List<Location> getQueenMoves(GamePiece piece, Location start){
    	ArrayList<Location> validLocations = new ArrayList<Location>();
    	int x = start.toArray()[0];
    	int y = start.toArray()[1];
    	return validLocations;
    }
}
