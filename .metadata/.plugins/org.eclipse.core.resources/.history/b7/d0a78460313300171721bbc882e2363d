package com.rsmith.service;

import java.util.ArrayList;
import java.util.List;

import com.rsmith.models.Location;
import com.rsmith.models.Pawn;
import com.rsmith.models.PlayerColor;

public class ValidMoveService {
	private static List<Location> validLocations;
	private static int[] coordinates;

	public static List<Location> getPawnMoves(Pawn pawn, Location start){
		coordinates = start.toArray();
		validLocations = new ArrayList<Location>();
		if(pawn.getColor() == PlayerColor.BLACK){
			validLocations.add(new Location(coordinates[0], coordinates[1]-1));
			if(pawn.getIsFirstMove()){
				validLocations.add(new Location(coordinates[0], coordinates[1]-2));
				pawn.setIsFirstMove(false);
			}
		}
		
		if(pawn.getColor() == PlayerColor.WHITE){
			validLocations.add(new Location(coordinates[0], coordinates[1]+1));
			if(pawn.getIsFirstMove()){
				validLocations.add(new Location(coordinates[0], coordinates[1]+2));
				pawn.setIsFirstMove(false);
			}
		}

		return validLocations;
	}
	
	public static List<Location> getRookMoves(Location start){
		validLocations = new ArrayList<Location>();
		coordinates = start.toArray();
		moveUnlimitedRight(coordinates);
		moveUnlimitedUp(coordinates);
		moveUnlimitedLeft(coordinates);
		moveUnlimitedDown(coordinates);
		return validLocations;
	}
	
	//Ain't it funny how the night moves. Bob Seger. Legend...
	public static List<Location> getKnightMoves(Location start){
		coordinates = start.toArray();
		validLocations.add(new Location(coordinates[0]+2, coordinates[1]+1));
		validLocations.add(new Location(coordinates[0]+2, coordinates[1]-1));
		validLocations.add(new Location(coordinates[0]-2, coordinates[1]+1));
		validLocations.add(new Location(coordinates[0]-2, coordinates[1]-1));
		validLocations.add(new Location(coordinates[0]+1, coordinates[1]+2));
		validLocations.add(new Location(coordinates[0]+1, coordinates[1]-2));
		validLocations.add(new Location(coordinates[0]-1, coordinates[1]+2));
		validLocations.add(new Location(coordinates[0]-1, coordinates[1]-2));
		return validLocations;
	}
	
	public static List<Location> getBishopMoves(Location start){
		validLocations = new ArrayList<Location>();
		coordinates = start.toArray();
		moveUnlimitedUpRight(coordinates);
		moveUnlimitedUpLeft(coordinates);
		moveUnlimitedDownRight(coordinates);
		moveUnlimitedDownLeft(coordinates);
		return validLocations;
	}
	
	public static List<Location> getKingMoves(Location start){
		coordinates = start.toArray();
		validLocations = new ArrayList<Location>();
		validLocations.add(new Location(coordinates[0], coordinates[1]+1));
		validLocations.add(new Location(coordinates[0], coordinates[1]-1));
		validLocations.add(new Location(coordinates[0]+1, coordinates[1]));
		validLocations.add(new Location(coordinates[0]-1, coordinates[1]));
		validLocations.add(new Location(coordinates[0]+1, coordinates[1]+1));
		validLocations.add(new Location(coordinates[0]+1, coordinates[1]-1));
		validLocations.add(new Location(coordinates[0]-1, coordinates[1]+1));
		validLocations.add(new Location(coordinates[0]-1, coordinates[1]-1));
		return validLocations;
	}
	
	public static List<Location> getQueenMoves(Location start){
		coordinates = start.toArray();
		validLocations = new ArrayList<Location>();
		moveUnlimitedUp(coordinates);
		moveUnlimitedDown(coordinates);
		moveUnlimitedLeft(coordinates);
		moveUnlimitedRight(coordinates);
		moveUnlimitedUpRight(coordinates);
		moveUnlimitedUpLeft(coordinates);
		moveUnlimitedDownRight(coordinates);
		moveUnlimitedDownLeft(coordinates);
		return validLocations;
	}
	
	private static void moveUnlimitedRight(int[] start){
		int x = start[0];
		int y = start[1];
		for(int i = 1; (x+i) < 8; i++){
			validLocations.add(new Location(x+i, y));
		}
	}
	
	private static void moveUnlimitedLeft(int[] start){
		int x = start[0];
		int y = start[1];
		for(int i = 1; (x-i) >= 0; i++){
			validLocations.add(new Location(x-i, y));
		}
	}
	
	private static void moveUnlimitedUp(int[] start){
		int x = start[0];
		int y = start[1];
		for(int i = 1; (y-i) >= 0; i++){
			validLocations.add(new Location(x, y-i));
		}
	}
	
	private static void moveUnlimitedDown(int[] start){
		int x = start[0];
		int y = start[1];
		for(int i = 1; (y+i) < 8; i++){
			validLocations.add(new Location(x, y+i));
		}
	}
	
	private static void moveUnlimitedUpRight(int[] start){
		int x = start[0];
		int y = start[1];
		while(x < 7 && y > 0){
			x++;
			y--;
			validLocations.add(new Location(x, y));
		}
	}

	private static void moveUnlimitedUpLeft(int[] start){
		int x = start[0];
		int y = start[1];
		while(x > 0 && y > 0){
			x--;
			y--;
			validLocations.add(new Location(x, y));
		}
	}
	
	private static void moveUnlimitedDownRight(int[] start){
		int x = start[0];
		int y = start[1];
		while(x < 7 && y < 7){
			x++;
			y++;
			validLocations.add(new Location(x, y));
		}
	}
	
	private static void moveUnlimitedDownLeft(int[] start){
		int x = start[0];
		int y = start[1];
		while(x > 0 && y < 7){
			x--;
			y++;
			validLocations.add(new Location(x, y));
		}
	}
	
	//TODO Test
	public static void main(String args[]){
		Pawn p = new Pawn(PlayerColor.BLACK);
		System.out.println(p.getColor() == PlayerColor.BLACK);
	}

}
